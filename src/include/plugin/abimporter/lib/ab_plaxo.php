<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Plaxo contacts importer

You may not reprint or redistribute this code without permission from Lunarsys Solutions.

Copyright 2009 Lunarsys Solutions. All Rights Reserved
WWW: http://www.lunarsys.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this importer!');

global $_OZ_SERVICES;
$_OZ_SERVICES['plaxo'] = array('type'=>'abi', 'label'=>'Plaxo', 'class'=>'PlaxoImporter');

/////////////////////////////////////////////////////////////////////////////////////////
//PlaxoImporter
/////////////////////////////////////////////////////////////////////////////////////////
    
class PlaxoElement {

	var $type;
	var $map = array();

	function PlaxoElement($sa) {

		$n = count($sa);
		if ($n > 0) {
			$this->type = $sa[0];
		}
		for ($i=1; $i+1<$n; $i+=2) {
			$key = $sa[$i];
			//For memory optimization, we only keep relevant mapping
			//if ($key=='FirstName' || $key=='MiddleName' || $key=='LastName' || $key=='DisplayName' || $key=='ContactIdentifier' ||
			//	$key=='GUID' || $key=='Code' || $key=='Message' || $key=='Uhid') {
				$value = $sa[$i + 1];
				$this->map[$key] = $value;
			//}
		}
	}

	function get ($key, $defaultValue=null) {
	 	if (isset($this->map[$key])) return $this->map[$key];
	 	else return $defaultValue;
	}
}


//@api
class PlaxoImporter extends WebRequestor {
 
 	var $SERVER = 'https://oapi.plaxo.com/rest?package=';
	var $EMAIL_FIELDS = array("PersonalEmail", "PersonalEmail2", "PersonalEmail3","BusinessEmail", "BusinessEmail2", "BusinessEmail3");

	var $guid;
	var $uhid;
	var $password;

	function escape($str) {
		$sb = '';
		$n = strlen($str);
		for ($i = 0; $i < $n; $i++) {
			$v = $str[$i];
			if (ord($v) >= 32 && ord($v) < 127 && $v != '\\' && $v != '"' && $v != '&' && $v != '?' && $v != '#') {
				$sb.=$v;
			} else {
				$sb.="\\x";
				$hex = dechex(ord($v));
				if (strlen($hex)==1) $sb.='0';
				$sb.=$hex;
			}
		}
		return $sb;
	}

	function unescape(&$str) {
		// Remove first and last single quotes
		$i1 = strpos($str,"'");
		$i2 = strrpos($str,"'");
		if ($i1!==FALSE && $i2!==FALSE && $i1 < $i2) {
			$str = substr($str,$i1+1,$i2-$i1-1);
		}
		$sb = '';
		$n = strlen($str);
		for ($i = 0; $i < $n; $i++) {
			$c = $str[$i];
			if ($c == "\\" && $i + 3 < $n && $str[$i+1]=='x') {
				// Next 3 digits = xYY where YY is the hex code of the character
				$hex = substr($str,$i+2,2);
				$v = hexdec($hex);
				$sb.=chr($v);
				$i += 3;
			} else {
			 	$sb.=$c;
			}
		}
		return $sb;
	}


	function parse(&$response) {

		$al = array();

		// Split by [...] values
		$n = strlen($response);
		for ($i = 0; $i < $n;) {
			$i1 = strpos($response,'[',$i);
			if ($i1===FALSE) break;
			$i2 = strpos($response,']', $i1);
			if ($i1===FALSE) break;
			$i = $i2 + 1;
			$s = substr($response,$i1+1,$i2-$i1-1);

			// Tokenize and unescape string to unicode
			$sa = explode(",",$s);
			$m = count($sa);
			for ($j = 0; $j < $m; $j++) {
				$sa[$j] = $this->unescape($sa[$j]);
			}

			// Add this string array as an element to the result
			$al[]= new PlaxoElement($sa);
		}
		return $al;
	}

	function findElementPos($name, &$res, $startOffset) {
		$n = count($res);
		for ($i = $startOffset; $i < $n; $i++) {
			$sa = $res[$i];
			if ($name==$sa->type)
				return $i;
		}
		return -1;
	}

    
	//@api
	function login ($loginEmail, $password) {

		$res = array();
		$this->guid = NULL;
		$this->uhid = NULL;

		// Remove suffix
		$loginEmail = preg_replace("/^(.*?)(\.plaxo)$/ims", '${1}', $loginEmail);

		// Get GUID
		//Curl doesn't take the spaces well...
		//$s = "['Header', 'ProtoVer', '1','Client', 'OZABI/1.0', 'OS', 'windows/service pack infinity', 'Platform', 'Outlook/2005']%0a['/Header']%0a['CreateGUID']%0a['/CreateGUID']";
		$s = "['Header','ProtoVer','1','Client','OZABI/1.0','OS','windows/servicepackinfinity','Platform','Outlook/2005']%0a['/Header']%0a['CreateGUID']%0a['/CreateGUID']";
		$url = $this->SERVER.$s;
		$html = $this->httpGet($url);
		$res = $this->parse($html);

		$i = $this->findElementPos("Data", $res, 0);
		if ($i != -1) {
			$ele = $res[$i];
			$this->guid = $ele->get("GUID");
		}
		if ($this->guid == null) {
			return abi_set_error(_ABI_FAILED,'Could not obtain GUID');
		}

		// Authenticate
		$sb = '';
		// sb.append(SERVER);
		$sb.="['Header','ProtoVer','1','ClientID','";
		$sb.=$this->escape($this->guid);
		$sb.="','Identifier','";
		$sb.=$this->escape($loginEmail);
		$sb.="','AuthMethod','Plaxo','Password','";
		$sb.=$this->escape($password);
		$sb.="','Client','OZABI/1.0','OS','windows/servicepackinfinity','Platform','Outlook/2005']%0a['/Header']";
		$url = $this->SERVER.$sb;
		$html = $this->httpGet($url);
		$res = $this->parse($html);

		$i = $this->findElementPos("Status", $res, 0);
		if ($i != -1) {
			$ele = $res[$i];
			$code = $ele->get("Code");
			if ("401"==$code) {
				return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
			} else if ("200"!=$code) {
				return abi_set_error(_ABI_FAILED,'Received Error '.$ele->get("Message"));
			}
		}

		$i = $this->findElementPos("Header", $res, 0);
		if ($i != -1) {
			$ele = $res[$i];
			$this->uhid = $ele->get("Uhid");
		}

		if ($this->uhid == null) {
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}
	}

	//@api
	function fetchContacts ($loginEmail=null, $password=null) {
		if ($loginEmail!=null) {
		 	$this->password = $password;
			$res = $this->login($loginEmail,$password);
			if ($res!=_ABI_SUCCESS)
				return $res;
		}
	
		$sb = '';
		$sb.="['Header','ProtoVer','1','ClientID','";
		$sb.=$this->escape($this->guid);
		$sb.="','Uhid','";
		$sb.=$this->uhid;
		$sb.="','Password','";
		$sb.=$this->escape($this->password);
		$sb.="','Client','OZABI/1.0','OS','windows/servicepackinfinity','Platform','Outlook/2005']%0a['/Header']%0a['Sync','Target','Contacts','Source','OzAbiLocalContacts','LastAnchor','0','NextAnchor','1']%0a['/Sync']";
		$url = $this->SERVER.$sb;

		$html = $this->httpGet($url);

		$cl = array();
		$res = $this->parse($html);
		$i = 0;
		while ($i != -1) {
			// Plaxo data comes in Add & Data element pairs
			$i = $this->findElementPos("Add", $res, $i);
			if ($i == -1)
				break;
			$i = $this->findElementPos("Data", $res, $i + 1);
			if ($i == -1)
				break;

			$ele = $res[$i];

			$name = ''; 
			$fname = $ele->get("FirstName",'');
			$mname = $ele->get("MiddleName",'');
			$lname = $ele->get("LastName",'');
			if (!empty($fname) || !empty($mname) || !empty($lname)) {
			 	$name = $fname.' '.$mname.' '.$lname;
			 	$name = ls_reduce_whitespace($name);
			}
			else {
				$name = $ele->get("DisplayName");
			}
	
			if (empty($name))
				$name = $ele->get("ContactIdentifier");
			foreach ($this->EMAIL_FIELDS as $efield) {
				$email = $ele->get($efield);
				if (!empty($email) && abi_valid_email($email)) {
					$cl[] = new Contact($name, $email);
				}
			}
			$i++;
		}
		return $cl;
	}
}

//plaxo
global $_DOMAIN_IMPORTERS;
$_DOMAIN_IMPORTERS["plaxo"] = 'PlaxoImporter';

?>
