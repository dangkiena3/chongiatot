<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

MySpace address book importer

You may not reprint or redistribute this code without permission from Lunarsys Solutions.

Copyright 2009 Lunarsys Solutions. All Rights Reserved
WWW: http://www.lunarsys.com
********************************************************************************/
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['myspace'] = array('type'=>'abi', 'label'=>'MySpace', 'class'=>'MySpaceImporter');

/////////////////////////////////////////////////////////////////////////////////////////
//MySpaceImporter
/////////////////////////////////////////////////////////////////////////////////////////

define('MySpaceImporter_SKIP_REGEX',"/<div class=\"skip\">\\s*<a href=\"([^\"]*)\"/ims");
define('MySpaceImporter_USERID_REGEX',"/MySpace\\.ClientContext\\s*=\\s*\\{\"UserId\"\\s*:\\s*(\\d+)/ims");
define('MySpaceImporter_CONTACT_REGEX',"/hashJsonContacts.add\\(\\d+,\\s*('.*?')\\);\\r\\n/ims");
define('MySpaceImporter_NEXTPAGE_REGEX',"/<a\\s+class=\"pagingLink\"\\s+href=\"javascript:__doPostBack\\('([^']*?\\\$pagerHeader)','(\\d+)'\\)\">[^<]*&rsaquo;<\/a>/ims");
define('MySpaceImporter_REDIRECT_REGEX',"/<meta[^>]*?refresh[^>]*?content\\s*=\\s*[\"']?[\\s\\d]+;\\s*url\\s*=['\"]?([^\"'>]*)[^>]*>/ims");
define('MySpaceImporter_LOGINFIELDNAMES_REGEX',"/\"(ctl[^\"]*?\\\$Email_Textbox)\".*\"(ctl[^\"]*?\\\$Password_Textbox)\"/ims");


//@api
class MySpaceImporter extends WebRequestor {

	var $memberId;
	
	//@api
	function logout () {
		$this->httpGet("http://us.myspace.com/index.cfm?fuseaction=signout");
	}

	//@api
	function login ($email, $password) {

		//If login email ends with ".yahoo" only, then we remove it
		$email = preg_replace("/^(.*?)(\.myspace)$/ims", '${1}', $email);

	 	$html = $this->httpGet('http://us.myspace.com');
		$form = ls_extract_form_by_id($html,"LoginForm");
		if ($form==null) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login form');
		}

        if (preg_match(MySpaceImporter_LOGINFIELDNAMES_REGEX,$html,$matches)==0) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login field names');
        }
        $emailField = $matches[1];
        $passField = $matches[2];
		$form->setField($emailField,$email);
		$form->setField($passField,$password);
        $postData = $form->buildPostData();
    	$html = $this->httpPost($form->action, $postData);
		if (strpos($html, 'You Must Be Logged-In to do That!')!==false ||
			strpos($html, 'populateInvalidLogin')!==false) {
		 	$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}

		//May get advert. Just jump to main page
        if (preg_match(MySpaceImporter_SKIP_REGEX,$html,$matches)) {
	     	$location = htmlentities($matches[1]);
	     	$html = $this->httpGet($location);
        }

		if (preg_match(MySpaceImporter_REDIRECT_REGEX,$html,$matches)!=0) {
			$location = $matches[1];
			//Handle bad MySpace advert redirect ("fuseaction=user" instead of "index.cfm?fuseaction=user")
			if (strpos($location,"action=user")>0) {
				$location = 'http://home.myspace.com/index.cfm?fuseaction=user';
			}
			$html = $this->httpGet($location);
		}
		else {
		}

		//Check for intersitials
		if (strpos($this->lastUrl,'fuseaction=CampaignInterstitial')!==FALSE) {
			$location = 'http://home.myspace.com/index.cfm?fuseaction=user';
			$html = $this->httpGet($location);
		}

		if (strpos($html, 'You Must Be Logged-In to do That!')!==false ||
			strpos($html, 'populateInvalidLogin')!==false) {
		 	$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}
		
		//Captcha challenge raised for the account due to too many login attempts
        if (strpos($html,'id="loginAttempts"')!==false || strpos($html,'http://security.myspace.com/captcha/captcha.aspx')!==false) {
		 	$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}

        if (preg_match(MySpaceImporter_USERID_REGEX,$html,$matches)==0) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find user id');
        }
     	$this->memberId = $matches[1];

		return abi_set_success();
	}


	function _extractContacts($html, &$al) {

		$n = 0;
		$i1 = strpos($html,"hashJsonContacts.add(");
		if ($i1===FALSE) return 0;
		while ($i1!==FALSE) {
			$i2 = strpos($html,'\'', $i1);
			if ($i2===FALSE) break;
			$i3 = strpos($html,"}');", $i2);
			if ($i3===FALSE || $i3<$i2) break;
		 	$jstr = substr($html,$i2,$i3+2-$i2);
		 	$s = ls_jsdecode_quoted_string($jstr);
			$v = ls_json_decode($s,TRUE);
			$name = isset($v['DisplayName']) ? $v['DisplayName'] : '';
			if (empty($name)) {
				$fname = isset($v['FirstName']) ? $v['FirstName'] : '';
				$lname = isset($v['LastName']) ? $v['LastName'] : '';
			 	$name = trim(ls_reduce_whitespace($fname.' '.$lname));
			}
			
			$v2 = isset($v['ContactEmailList']) ? $v['ContactEmailList'] : array();
			$emails = isset($v2['List']) ? $v2['List'] : array();
			foreach ($emails as $ev) {
			 	$email = isset($ev['Email']) ? $ev['Email'] : NULL;
			 	if (!empty($email)) {
					$email = trim($email);
					if (abi_valid_email($email)) {
						// Add contact
						$al[] = new Contact($name, $email);
					}
				} 
			}
			$n++;
			$i1 = strpos($html,"hashJsonContacts.add(", $i3);
		}

/*		
		$n = 0;
        preg_match_all(MySpaceImporter_CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
		foreach ($matches as $val) {
		 	$s = ls_jsdecode_quoted_string($val[1]);
			$v = ls_json_decode($s,TRUE);
			$name = isset($v['DisplayName']) ? $v['DisplayName'] : '';
			if (empty($name)) {
				$fname = isset($v['FirstName']) ? $v['FirstName'] : '';
				$lname = isset($v['LastName']) ? $v['LastName'] : '';
			 	$name = trim(ls_reduce_whitespace($fname.' '.$lname));
			}
			
			$v2 = isset($v['ContactEmailList']) ? $v['ContactEmailList'] : array();
			$emails = isset($v2['List']) ? $v2['List'] : array();
			foreach ($emails as $ev) {
			 	$email = isset($ev['Email']) ? $ev['Email'] : NULL;
			 	if (!empty($email)) {
					$email = trim($email);
					if (abi_valid_email($email)) {
						// Add contact
						$al[] = new Contact($name, $email);
					}
				} 
			}
			$n++;
		}
*/		
		return $n;
	}


	//@api
	function fetchContacts ($loginemail=NULL,$password=NULL) {

		if ($loginemail!=NULL && $password!=NULL) {
			$res = $this->login($loginemail,$password);
			if ($res!=_ABI_SUCCESS) return $res;
		}

		$MAX_PAGES = 20;

		$al = array();

		// Myspace contacts
		$html = $this->httpGet("http://messaging.myspace.com/index.cfm?fuseaction=adb");
		for ($i = 0; $i < $MAX_PAGES; $i++) {
			$n = $this->_extractContacts($html, $al);
			if ($n === 0) break;
			
	        if (preg_match(MySpaceImporter_NEXTPAGE_REGEX,$html,$matches)==0) break;
			$evttarget = $matches[1];
			$evtvalue = $matches[2];
			$form = ls_extract_form_by_name($html,'aspnetForm');
			if ($form===NULL) break;
			$form->setField("__EVENTTARGET", htmlentities2utf8($evttarget));
			$form->setField("__EVENTARGUMENT", htmlentities2utf8($evtvalue));
	        $postData = $form->buildPostData();
	    	$html = $this->httpPost($form->action, $postData);
		}

		// Switch to non-Myspace contacts tab.
		$form = ls_extract_form_by_name($html, "aspnetForm");
		if ($form!==NULL) {
			$form->setField("___msAddressBookCurrentTab", "0,1");
	        $postData = $form->buildPostData();
	    	$html = $this->httpPost($form->action, $postData);
			for ($i = 0; $i < $MAX_PAGES; $i++) {
				$n = $this->_extractContacts($html, $al);
				if ($n === 0) break;
				
		        if (preg_match(MySpaceImporter_NEXTPAGE_REGEX,$html,$matches)==0) break;
				$evttarget = $matches[1];
				$evtvalue = $matches[2];
				$form = ls_extract_form_by_name($html,'aspnetForm');
				if ($form===NULL) break;
				$form->setField("__EVENTTARGET", htmlentities2utf8($evttarget));
				$form->setField("__EVENTARGUMENT", htmlentities2utf8($evtvalue));
		        $postData = $form->buildPostData();
		    	$html = $this->httpPost($form->action, $postData);
			}
		}
		
		return $al;
	}
	
}

// MySpace
global $_DOMAIN_IMPORTERS;
$_DOMAIN_IMPORTERS["myspace"]='MySpaceImporter';

?>
